import logging
logging.getLogger('angr').setLevel('CRITICAL') #level: WARNING, INFO, NOTSET, DEBUG, ERROR, CRITICAL
import IPython
import angr, claripy

class Vulnerability_Analyser:

    def __init__(self, project: angr.Project):
        self.project = project
        stack_chk_fail_sym = self.project.loader.find_symbol("__stack_chk_fail")
        self.stack_chk_fail_addr = None
        if stack_chk_fail_sym is not None:
            self.stack_chk_fail_addr = self.project.loader.find_symbol("__stack_chk_fail").rebased_addr
        


    def check_unconstrained(self, state: angr.SimState):
        if state.solver.symbolic(state.regs.pc):
            return True
        return False

    def stack_smashing_checker(self, state: angr.SimState) -> bool:
        if self.stack_chk_fail_addr is None:
            return False
        if state.addr == self.stack_chk_fail_addr:
            return True
        return False

    def check(self, sm: angr.SimulationManager):
        if len(sm.active) > 0: 
            for a in sm.active: 
                if self.check_unconstrained(a):
                    return True
                if self.stack_smashing_checker(a):
                    return True
        return False